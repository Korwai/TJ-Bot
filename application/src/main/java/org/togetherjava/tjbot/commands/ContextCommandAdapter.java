package org.togetherjava.tjbot.commands;

import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.SelectMenuInteractionEvent;
import net.dv8tion.jda.api.interactions.commands.Command;
import net.dv8tion.jda.api.interactions.commands.build.CommandData;
import net.dv8tion.jda.api.interactions.commands.build.Commands;
import org.jetbrains.annotations.NotNull;

import java.util.List;

/**
 * Adapter implementation of a {@link BotCommand}. A new command can be registered by adding it
 * to {@link Features}.
 * <p>
 * Further, {@link #onButtonClick(ButtonInteractionEvent, List)} and
 * {@link #onSelectionMenu(SelectMenuInteractionEvent, List)} can be overridden if desired. The default
 * implementation is empty, the adapter will not react to such events.
 * <p>
 * <p>
 * The adapter manages all command related data itself, which can be provided during construction
 * (see {@link #ContextCommandAdapter(Command.Type, String, CommandVisibility)}). In order to add
 * options, subcommands or similar command configurations, use {@link #getData()} and mutate the
 * returned data object (see {@link CommandData} for details on how to work with this class).
 * <p>
 * <p>
 * If implementations want to add buttons or selection menus, it is highly advised to use component
 * IDs generated by {@link #generateComponentId(String...)}, which will automatically create IDs
 * that are valid per {@link SlashCommand#onSlashCommand(SlashCommandInteractionEvent)}.
 * <p>
 * <p>
 * Some example commands are available in {@link org.togetherjava.tjbot.commands.basic}. A minimal
 * setup would consist of a class like
 *
 * <pre>
 * {
 *     &#64;code
 *     public class PingCommand extends ContextCommandAdapter implements UserContextCommand {
 *         public PingCommand() {
 *             super(Command.Type.USER, "ping", SlashCommandVisibility.GUILD);
 *         }
 *
 *         &#64;Override
 *         public void onUserContext(@NotNull UserContextInteractionEvent event) {
 *             event.reply("Pong " + event.getTargetMember().getEffectiveName() + "!").queue();
 *         }
 *     }
 * }
 * </pre>
 * <p>
 * and registration of an instance of that class in {@link Features}.
 */
public abstract class ContextCommandAdapter extends BotCommandAdapter {

    /**
     * Creates a new adapter with the given data.
     *
     * @param type the {@link Command.Type type} of the command, can be either
     *              {@link Command.Type#MESSAGE} or {@link Command.Type#USER}
     * @param name the name of the command, see {@link Commands#context(Command.Type, String)} for the requirements
     * @param visibility the visibility of the command
     */
    protected ContextCommandAdapter(@NotNull Command.Type type, @NotNull String name, @NotNull CommandVisibility visibility) {
        super(Commands.context(type, name), visibility);
    }
}